title: Step google play deploy [beta]
summary: Step google play deploy
description: |-
  To use this step:

  1. You have to upload the first apk manually (using the web interface).
    See: https://play.google.com/apps/publish -> All applications -> Add new application

  2. You must link your Google Play Developer Console to an API project.
    See: https://developers.google.com/android-publisher/getting_started (Linking your API Project section)

  3. Setting Up API Access Clients, using a service account:
    See: https://developers.google.com/android-publisher/getting_started (Using a service account)
    When you create your service account on the google developer console choose json as Key Type.

  4. Grant Access to provide the service account the necessary rights.
    See: https://play.google.com/apps/publish -> Settings -> User account & rights -> Invite new user and give the privileges.
    Due to the way the Google Play Publisher API works, you have to grant at least the following permissions to that service account:
     - Edit store listing, pricing & distribution
     - Manage Production APKs
     - Manage Alpha & Beta APKs
     - Manage Alpha & Beta users
website: https://github.com/bitrise-io/steps-google-play-deploy
source_code_url: https://github.com/bitrise-io/steps-google-play-deploy
support_url: https://github.com/bitrise-io/steps-google-play-deploy/issues
host_os_tags:
  - osx-10.10
  - ubuntu
project_type_tags:
  - android
type_tags:
  - deploy
is_requires_admin_user: false
is_always_run: false
is_skippable: false
deps:
  brew:
  - name: go
  apt_get:
  - name: golang
    bin_name: go
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-google-play-deploy
inputs:
  - service_account_json_key_path:
    opts:
      title: Service Account JSON key file path
      summary: Service Account JSON key file path
      description: |-
        Path to the Service Account's JSON key file.

        For remote JSON key file you can provide any download location (ex: `https://URL/TO/key.json`).
        For local JSON key file provide file path url. (ex: `file://PATH/TO/key.json`).
  - package_name:
    opts:
      title: Package name
      summary: Package name
      description: |-
        Package name of the APK to deploy.
      is_required: true
  - apk_path: "$BITRISE_APK_PATH"
    opts:
      title: APK file path
      summary: APK file path
      description: |-
        Path to the APK to deploy.

        You can provide multiple APK paths separated by `|` character.

        Format emxamples:

        - `/path/to/my/app.apk`
        - `/path/to/my/app1.apk|/path/to/my/app2.apk|/path/to/my/app3.apk`
      is_required: true
  - track: alpha
    opts:
      title: Track
      summary: Track
      description: |-
        Track to assign the APK(s).
      is_required: true
      value_options:
      - alpha
      - beta
      - rollout
      - production
  - user_fraction: 
    opts:
      title: User Fraction
      summary: User Fraction
      description: |-
        __Only available if `track` is `rollout`.__

        Portion of the users who should get the staged rollout version of the APK.
      is_required: true
      value_options:
      - "0.05"
      - "0.1"
      - "0.2"
      - "0.5"
  - service_account_email:
    opts:
      title: "[DEPRECATED!] Service account ID"
      summary: "[DEPRECATED!] Service account ID"
      description: |-
        __DEPRECATED!__
        Use JSON key instead of P12 key and `service_account_json_key_path` input.

        The `Service account ID` of the Service Account you want to use to authorize the deploy. 
  - key_file_path:
    opts:
      title: "[DEPRECATED!] Service Account p12 key file path"
      summary: "[DEPRECATED!] Service Account p12 key file path"
      description: |-
        __DEPRECATED!__
        Use JSON key instead of P12 key and `service_account_json_key_path` input.

        Path to the Service Account's p12 key file .

        For remote P12 key file you can provide any download location (ex: `https://URL/TO/key.p12`).
        For local P12 key file provide file path url. (ex: `file://PATH/TO/key.p12`).
