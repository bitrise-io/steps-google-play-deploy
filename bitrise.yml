format_version: "2"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - RELEASE_VERSION: 1.3.3

  - SAMPLE_APP_URL: https://github.com/bitrise-samples/sample-apps-android-realmtasks.git
  - BRANCH: master

  - GRADLE_TASK: assembleRelease
  - GRADLEW_PATH: "./gradlew"
  - PACKAGE_NAME: "io.bitrise.realmtasks"

  # define these in your .bitrise.secrets.yml
  - SERVICE_ACCOUNT_JSON_KEY_PATH: $SERVICE_ACCOUNT_JSON_KEY_PATH
  - VERSION_CODE: "$VERSION_CODE"
  - TRACK: $TRACK

  - BITRISEIO_GOOGLE_SERVICES_JSON_URL: $BITRISEIO_GOOGLE_SERVICES_JSON_URL

  - BITRISEIO_ANDROID_KEYSTORE_URL: $BITRISEIO_ANDROID_KEYSTORE_URL
  - BITRISEIO_ANDROID_KEYSTORE_PASSWORD: $BITRISEIO_ANDROID_KEYSTORE_PASSWORD
  - BITRISEIO_ANDROID_KEYSTORE_ALIAS: $BITRISEIO_ANDROID_KEYSTORE_ALIAS
  - BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD: $BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD

workflows:
  test:
    before_run:
    - audit-this-step
    - go-tests
    steps:
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            rm -rf ./_tmp
    - change-workdir:
        title: Switch working dir to test/_tmp dir
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            if [[ -z "${SAMPLE_APP_URL}" ]]; then
              echo "error: there is no SAMPLE_APP_URL env var specified"
              exit 1
            elif [[ -z "${COMMIT}" && -z "${BRANCH}" ]]; then
              echo "error: can't checkout: there is no BRANCH or COMMIT env var specified"
              exit 1
            fi
            git init
            git remote add origin "${SAMPLE_APP_URL}"
            git fetch || exit 1
            [[ -n "${COMMIT}" ]] && git checkout "${COMMIT}" || git checkout "${BRANCH}"
    - install-missing-android-tools:
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            curl -o "./app/google-services.json" "$BITRISEIO_GOOGLE_SERVICES_JSON_URL"
    - change-android-versioncode-and-versionname:
        inputs:
        - build_gradle_path: "./app/build.gradle"
        - new_version_code: $VERSION_CODE
    - gradle-runner:
        inputs:
        - gradle_task: "$GRADLE_TASK"
        - gradlew_path: "$GRADLEW_PATH"
    - sign-apk:
        inputs:
        - apk_path: $BITRISE_APK_PATH_LIST
    - path::./:
        title: Step Test
        inputs:
        - service_account_json_key_path: $SERVICE_ACCOUNT_JSON_KEY_PATH
        - package_name: $PACKAGE_NAME
        - apk_path: $BITRISE_SIGNED_APK_PATH
        - track: $TRACK

  go-tests:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go test ./...

  _install-test-tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            go get -u -v github.com/kisielk/errcheck
            go get -u -v github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- Utility workflows
  dep-update:
    title: Update the locked versions of all dependencies
    steps:
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -x

            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -update -v

  # ----------------------------------------------------------------
  # --- workflow to create Release version
  create-release:
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u github.com/bitrise-tools/releaseman
            export CI=true
            releaseman create --version "$RELEASE_VERSION"

  # ----------------------------------------------------------------
  # --- workflow to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - STEP_ID_IN_STEPLIB: google-play-deploy
      - STEP_GIT_VERION_TAG_TO_SHARE: $RELEASE_VERSION
      - STEP_GIT_CLONE_URL: https://github.com/bitrise-steplib/steps-google-play-deploy.git
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share
      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!
      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.
      You're now ready to share this Step, just make sure that
      the `STEP_ID_IN_STEPLIB` and `STEP_GIT_VERION_TAG_TO_SHARE`
      environments are set to the desired values!
      To share this Step into a StepLib you can just run: $ bitrise run share-this-step
      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c ${MY_STEPLIB_REPO_FORK_GIT_URL}
            bitrise share create --stepid ${STEP_ID_IN_STEPLIB} --tag ${STEP_GIT_VERION_TAG_TO_SHARE} --git ${STEP_GIT_CLONE_URL}
            bitrise share finish
